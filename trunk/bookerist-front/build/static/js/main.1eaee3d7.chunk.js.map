{"version":3,"sources":["AgendaModal.js","Agenda.js","AccueilLoggedIn.js","Accueil.js","img/logo.png","Header.js","HeaderLoggedIn.js","Inscription.js","Contact.js","ForgotPass.js","Parametre.js","App.js","index.js"],"names":["AgendaModal","props","getHeaderTxt","dispo","rdv","evenement","state","eventType","handleChanges","e","name","target","value","setState","handleCheckboxChanges","checked","startTime","endTime","handleReset","allDay","startDate","endDate","other_users","users_invites","handleClose","handleCloseModal","handleSave","preventDefault","event","title","objet","extendedProps","user_mail","mail","users_invited","type","description","start","end","color","textColor","clearState","handleAddEvent","renderEventDate","id","className","onChange","htmlFor","required","disabled","renderEventObjAndDescription","maxLength","autoComplete","generateDatalist","map","user","prenom","nom","_id","handleAddInvite","strInvite","document","getElementById","mailIndexes","indexOf","strMailInvite","substring","invite","find","alreadyInvited","generateListeInvites","listeSorted","sort","user1","user2","toUpperCase","toString","replaceAll","renderEventTypeContent","content","list","onClick","colSpan","readOnly","getProps","alreadyFetched","this","prop","fetch","baseURL","method","headers","then","res","json","catch","err","console","log","headerTxt","onSubmit","Component","Agenda","calendarRef","React","createRef","clearEventType","handleModalChanges","handleDateSelection","selectionInfo","openModal","calendar","view","unselect","toMoment","format","current","getApi","addEvent","handleSendEvents","addInfo","event_parsed","dateStart","startStr","dateEnd","endStr","backgroundColor","body","JSON","stringify","ok","message","user_events","getEvents","putEvents","all_events","evenements","forEach","push","concat","prevProps","prevState","modal","ref","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","momentPlugin","initialView","locale","firstDay","events","buttonText","today","month","week","day","headerToolbar","center","businessHours","daysOfWeek","selectable","selectMirror","editable","select","eventAdd","AccueilLoggedIn","menuOpened","profilOpened","divClass","Accueil","gotoInscription","handlePage","inInscription","saveChanges","handleCanBeLogged","setUserInfos","connect","handleConnexion","mdp","response","status","data","alert","placeholder","href","Header","src","logo","alt","height","width","gotoMain","HeaderLoggedIn","useState","handlePageMenu","stopPropagation","page","pageName","handleEventMenu","giveEventType","useEffect","handleCloseMenus","handleMenus","window","addEventListener","removeEventListener","localStorage","clear","disconnect","Inscription","handleMailUpdate","toLowerCase","handleFirstNameUpdate","prenomMaj","charAt","slice","handleLastNameUpdate","handleInscriptionFinished","sendInscription","mail2","mdp2","reactDom","render","Contact","max","compteur_objet","compteur_message","handleChange","champ","nameCompteur","length","msg","handleFinishContact","setItem","sentContact","alreadySent","parse","getItem","contactMessage","onReset","ForgotPass","setMail","Parametre","newMail","newMdp","confirmNewMdp","changeMail","changeMdp","handleModifMail","bind","handleModifPass","handleMailChange","handleSubmitParams","handleNewInfos","handleChangeParams","userModif","error","App","loggedIn","inAccueil","inForgotPass","inContact","inParams","handleLoginChange","pages","undefined","handleMenusAccueil","menuState","handleEventType","header","ReactDOM"],"mappings":"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","file":"static/js/main.1eaee3d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './AgendaModal.css';\nimport './Button.css';\n// import moment from 'moment';\n\n// let eventId = 0;\nconst baseURL = \"http://localhost:3001\";\n//Composant permettant d'afficher le modal pour créer un évènement dans l'agenda\nexport default class AgendaModal extends Component {\n    constructor(props){\n        super(props);\n\n        //Définission de l'état, par défaut le eventType sera disponibilité\n        this.state = {\n            eventType: this.props.eventType && this.props.eventType !== '' ? this.props.eventType : \"dispo\",\n            allDay: false,\n            startDate: '',\n            startTime: '',\n            endDate: '',\n            endTime: '',\n            objet: '',\n            description: '',\n            getProps: false, //pour ne récupérer les props qu'une fois\n            alreadyFetched: false,\n            other_users: [],\n            users_invites: [],\n        }\n    }\n    componentDidUpdate(){\n        const listProps = [\"startDate\", \"startTime\", \"endDate\", \"endTime\"];\n        if (!this.state.getProps)\n        {\n            for(let prop of listProps)\n            {\n                this.setState({\n                    [prop]: this.props[prop] ? this.props[prop] : ''\n                });\n            }\n            this.setState({ getProps: true});\n        }\n        if ((this.state.eventType === \"evenement\" || this.state.eventType === \"rdv\") && !this.state.alreadyFetched)\n        {\n            fetch(baseURL + \"/getUsers\", {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n            })\n            .then(res => res.json())\n            .then(res => {\n                // console.log(res);\n                this.setState({ other_users: res});\n            })\n            .catch(err => console.log(err));\n            this.setState({ alreadyFetched: true });\n        }\n        // let modal = document.getElementById(\"modal\");\n        // this.state.openModal ? modal.style.display = \"block\" : modal.style.display = \"none\";\n    }\n\n    clearState(){\n        this.setState({\n            eventType: this.props.eventType !== '' ? this.props.eventType : \"dispo\",\n            allDay: false,\n            startDate: '',\n            startTime: '',\n            endDate: '',\n            endTime: '',\n            getProps: false,\n            other_users: [],\n            users_invites: [],\n        })\n    }\n\n    //On génère le texte pour le header du modal en fonction de l'objet à créer\n    //Fonction fléchée pour accéder au this\n    getHeaderTxt = () => {\n        const eventTxt = {\n            dispo: \"Créer une nouvelle disponibilité\",\n            rdv: \"Créer un nouveau rendez-vous\",\n            evenement: \"Créer un nouvel évènement\",\n        };\n        return eventTxt[this.state.eventType];\n    }\n\n    //fonction fléchée pour accéder au this\n    handleChanges = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({\n            [name]: value,\n        });\n    }\n    //fonction fléchée pour accéder au this\n    handleCheckboxChanges = (e) => {\n        //pour l'instant seulement pour le allDay\n        const name = e.target.name;\n        const value = e.target.checked;\n        if (value === true)\n            this.setState({\n                startTime: '',\n                endTime: '',\n            });\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    handleReset = (e) => {\n        this.setState({\n            eventType: \"dispo\",\n            allDay: false,\n            startDate: '',\n            startTime: '',\n            endDate: '',\n            endTime: '',\n            other_users: [],\n            users_invites: [],\n        })\n    }\n\n    handleClose = (e) => {\n        // var modal = document.getElementById(\"modal\");\n        // modal.style.display = \"none\";\n        this.props.handleCloseModal();\n    }\n    \n   \n\n    handleSave = (e) => {\n        e.preventDefault();\n        // const event = {\n        //     id: eventId++,\n        //     title: this.state.eventType === \"dispo\" ? \"disponibilité\" : this.state.objet,\n        //     extendedProps: {\n        //         type: this.state.eventType,\n        //         description: this.state.description ? this.state.description : ''\n        //     },\n        //     allDay: this.state.allDay,\n        //     start: (this.state.startDate + (!this.state.allDay ? \"T\" + this.state.startTime : '')),\n        //     end: (this.state.endDate + (!this.state.allDay ? \"T\" + this.state.endTime : ''))\n        // }\n        let event = {};\n        if (this.state.eventType === 'evenement')\n        {\n            event = {\n                // id: moment().format('x'),\n                title: this.state.objet,\n                extendedProps: {\n                    user_mail: this.props.mail,\n                    users_invited: this.state.users_invites,\n                    type: this.state.eventType,\n                    description: this.state.description,\n                },\n                allDay: this.state.allDay,\n                start: (this.state.startDate + (!this.state.allDay ? \"T\" + this.state.startTime : '')),\n                end: (this.state.endDate + (!this.state.allDay ? \"T\" + this.state.endTime : '')),\n                color: \"rgb(177, 214, 153)\",\n                textColor: \"rgb(138, 74, 176)\"\n            }\n        }\n        this.clearState();\n        this.props.handleAddEvent(event);\n        this.handleClose();\n    }\n\n    render(){\n        const headerTxt = this.getHeaderTxt();\n        const eventType = this.state.eventType ? this.state.eventType : \"dispo\";\n        return (\n            //L'ensemble du modal\n            <div className=\"agendaModal\" id=\"modal\">\n\n                {/* Le contenu du modal */}\n                <div className=\"agendaModal\" id=\"modal-content\">\n                    <header>\n                        <span className=\"close\" onClick={this.handleClose}>&times;</span>\n                        <h1>{headerTxt}</h1>\n                    </header>\n                    <form id=\"formInfosEvent\" onSubmit={this.handleSave}>\n                        <div id=\"type\">\n                            <label htmlFor=\"eventType\" id=\"labelType\">Type : </label>\n                            <select name=\"eventType\" className=\"listeType\" value={this.state.eventType} id={eventType} onChange={this.handleChanges}>\n                                <option value=\"dispo\">disponibilité</option>\n                                <option value=\"rdv\">rendez-vous</option>\n                                <option value=\"evenement\">évènement</option>\n                            </select>\n                        </div>\n                        {/* <div id=\"all-day\">\n                            <input type=\"checkbox\" name=\"allDay\" id=\"allDay\" value=\"allDay\" onChange={this.handleCheckboxChanges}/>\n                            <label htmlFor=\"allDay\" name=\"labelAllDay\" id=\"labelAllDay\">Toute la journée</label>\n                        </div> */}\n                        {this.renderEventTypeContent()}\n                        <footer>\n                            {/* <button type=\"button\" name=\"reset\" className=\"modalButton\" id=\"reset\" onClick={this.handleReset}>Réinitialiser</button> */}\n                            <input type=\"reset\" name=\"reset\" className=\"modalButton\" value=\"Réinitialiser\" onClick={this.handleReset}/>\n                            <button type=\"submit\" name=\"save\" className=\"modalButton\" id=\"save\">Sauvegarder</button>\n                        </footer>\n                    </form>\n                </div>\n\n            </div>\n        );\n    };\n\n    renderEventDate = () => {\n        return (\n            <div id=\"div_date\">\n                {/* <table className=\"tableEventTypeContent\"> */}\n                <table className=\"tableEventDate\">\n                    <tbody>\n                        <tr className=\"tr_allday\">\n                            <td>\n                                <input type=\"checkbox\" name=\"allDay\" id=\"allDay\" value=\"allDay\" onChange={this.handleCheckboxChanges}/>\n                            </td>\n                            <td>\n                                <label htmlFor=\"allDay\" name=\"labelAllDay\" id=\"labelAllDay\">Toute la journée</label>\n                            </td>\n                        </tr>\n                        <tr className=\"tr_startDate\">\n                            <td>\n                                <label htmlFor=\"startDate\">Date de début : </label>\n                            </td>\n                            <td>\n                                <input type=\"date\" name=\"startDate\" onChange={this.handleChanges}\n                                value={this.state.startDate} required />\n                                <input type=\"time\" name=\"startTime\" onChange={this.handleChanges}\n                                value={this.state.startTime} disabled={this.state.allDay}/>\n                            </td>\n                        </tr>\n                        <tr className=\"tr_endDate\">\n                            <td>\n                                <label htmlFor=\"endDate\">Date de fin : </label>\n                            </td>\n                            <td>\n                                <input type=\"date\" name=\"endDate\" onChange={this.handleChanges}\n                                value={this.state.endDate} required />\n                                <input type=\"time\" name=\"endTime\" onChange={this.handleChanges}\n                                value={this.state.endTime} disabled={this.state.allDay}/>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            \n        );      \n    }\n\n    renderEventObjAndDescription = () => {\n        return (\n            <div>\n            <table className=\"table_Obj_description\">\n                <tbody>\n                    <tr className=\"tr_obj\">\n                        <td>\n                            <label htmlFor=\"inputObj\">Objet : </label>\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"objet\" id=\"inputObj\" maxLength=\"30\" onChange={this.handleChanges} autoComplete=\"off\" required />\n                        </td>\n                    </tr>\n                    <tr className=\"tr_description\">\n                        <td>\n                            <label htmlFor=\"inputDescription\">Description : </label>\n                        </td>\n                        <td>\n                            <textarea name=\"description\" id=\"inputDescription\" maxLength=\"130\" value={this.state.description} onChange={this.handleChanges} />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            </div>\n        );\n    }\n\n    generateDatalist = () => {\n        const tabUsers = this.state.other_users;\n        // const list = [];\n        let list = tabUsers.map(user => {\n            return(<option key={user._id} value={user.prenom + \" \" + user.nom + \" <\" + user.mail + \">\"} />);\n        })\n        return list;\n    }\n\n     //arrow fct to bind 'this'\n    handleAddInvite = () => {\n        let strInvite = document.getElementById('searchBarInvite').value;\n        if (strInvite && strInvite !== '')\n        {\n            let mailIndexes = [strInvite.indexOf(\"<\") + 1 , strInvite.indexOf(\">\")]\n            let strMailInvite = strInvite.substring(mailIndexes[0], mailIndexes[1]);\n            let invite = this.state.other_users.find(user => user.mail === strMailInvite);\n            let alreadyInvited = this.state.users_invites.find(user => user._id === invite._id) ? true : false;\n            //on remet la search bar à vide\n            document.getElementById('searchBarInvite').value=\"\";\n            if (!alreadyInvited)\n                this.setState({ users_invites: [...this.state.users_invites, invite] });\n        }\n\n    }\n\n    generateListeInvites = () => {\n        // let liste = [];\n\n        let liste = this.state.users_invites;\n        //on trie dans l'ordre alphabétique par NOM\n        //la fonction sort place el1 avant el2 si la foncion de tri renvoie un nb < 0,\n        //place el2 avant el1 si la fonction de tri renvoie un nb > 0\n        let listeSorted = liste.sort((user1, user2) => {\n            if (user1.nom.toUpperCase() < user2.nom.toUpperCase())\n                return -1;\n            else if (user1.nom.toUpperCase() > user2.nom.toUpperCase())\n                return 1;\n            return 0;\n        })\n        //on transforme la liste en ce qu'on veut afficher\n        listeSorted = listeSorted.map((user) => {\n            return user.prenom + \" \" + user.nom + \" <\" + user.mail + \">\\n\"\n        });\n        //on retourne le tableau sous forme de string en enlevant les virgules\n        return listeSorted.toString().replaceAll(',', '');\n        // this.state.users_invites.forEach((user) => {\n        //     liste.push(\n        //         user.prenom + \" \" + user.nom + \" <\" + user.mail + \">\\n\"\n        //     );\n        // });\n\n        // this.state.users_invites.forEach((user) => {\n        //     list.push(\n        //     <li key={user._id} className=\"li_user_invited\">\n        //         {user.prenom + \" \" + user.nom + \" <\" + user.mail + \">\"}\n        //     </li>\n        //     );\n        // })\n\n        // return liste;\n    }\n    //fonction pour afficher les informations à remplir en fontion du type d'objet à créer\n    //fonction fléchée pour accéder au this\n    renderEventTypeContent = () => {\n        let content = null;\n        //la variable content contiendra le contenu à afficher en fonction de la valeur de\n        //eventType dans l'état local\n        if(this.state.eventType === false || this.state.eventType === \"dispo\")\n        {\n            content = (\n                // <div className=\"eventTypeContent\">\n                //     <table className=\"tableEventTypeContent\">\n                //         <tbody>\n                //             <tr className=\"startDate\">\n                //                 <td>\n                //                     <label htmlFor=\"startDate\">Date de début : </label>\n                //                 </td>\n                //                 <td>\n                //                     <input type=\"date\" name=\"startDate\" onChange={this.handleChanges}\n                //                     value={this.state.startDate} />\n                //                     <input type=\"time\" name=\"startTime\" onChange={this.handleChanges}\n                //                     value={this.state.startTime} disabled={this.state.allDay}/>\n                //                 </td>\n                //             </tr>\n                //             <tr className=\"endDate\">\n                //                 <td>\n                //                     <label htmlFor=\"endDate\">Date de fin : </label>\n                //                 </td>\n                //                 <td>\n                //                     <input type=\"date\" name=\"endDate\" onChange={this.handleChanges}\n                //                     value={this.state.endDate} />\n                //                     <input type=\"time\" name=\"endTime\" onChange={this.handleChanges}\n                //                     value={this.state.endTime} disabled={this.state.allDay}/>\n                //                 </td>\n                //             </tr>\n                //         </tbody>\n                //     </table>\n                // </div>\n                <div className=\"eventTypeContent\">\n                    {this.renderEventDate()}\n                </div>\n            );\n        }\n        else if (this.state.eventType === \"evenement\")\n        {\n            content = (\n                <div className=\"eventTypeContent\">\n                    {this.renderEventObjAndDescription()}\n                    {this.renderEventDate()}\n                    <table className=\"tableEventTypeContent_evenement\">\n                        <tbody>\n                            {/* <tr className=\"startDate\">\n                                <td>\n                                    <label htmlFor=\"startDate\">Date de début : </label>\n                                </td>\n                                <td>\n                                    <input type=\"date\" name=\"startDate\" onChange={this.handleChanges}\n                                    value={this.state.startDate} />\n                                    <input type=\"time\" name=\"startTime\" onChange={this.handleChanges}\n                                    value={this.state.startTime} disabled={this.state.allDay}/>\n                                </td>\n                            </tr>\n                            <tr className=\"endDate\">\n                                <td>\n                                    <label htmlFor=\"endDate\">Date de fin : </label>\n                                </td>\n                                <td>\n                                    <input type=\"date\" name=\"endDate\" onChange={this.handleChanges}\n                                    value={this.state.endDate} />\n                                    <input type=\"time\" name=\"endTime\" onChange={this.handleChanges}\n                                    value={this.state.endTime} disabled={this.state.allDay}/>\n                                </td>\n                            </tr> */}\n                            <tr className=\"searchInvites\">\n                                <td>\n                                    <label htmlFor=\"labelSearchInvites\">Personnes à inviter à l'évènement : </label>\n                                </td>\n                                <td>\n                                    <input list=\"usersList\" name=\"searchBarInvite\" className=\"searchBar\" id=\"searchBarInvite\"\n                                    onChange={this.handleChanges}\n                                    autoComplete=\"off\"\n                                    />\n\n                                    <datalist id=\"usersList\">\n                                        {this.generateDatalist()}\n                                    </datalist>\n\n                                    <button type=\"button\" name=\"addButtonInvite\" className=\"addButton\" id=\"addButtonInvite\"\n                                    onClick={this.handleAddInvite}\n                                    />\n                                    {/* <input type=\"search\" /> */}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"liste_invites\" id=\"liste_invites_label\" colSpan=\"2\">\n                                    <label htmlFor=\"liste_invites\">Personnes invitées : </label>\n                                </td>\n                            </tr>\n                            <tr id=\"tr_liste_invites_content\">\n                                <td className=\"liste_invites\" id=\"liste_invites_content\" colSpan=\"2\">\n                                    <textarea name=\"liste_invites\" id=\"liste_invites\" readOnly disabled\n                                    value={this.generateListeInvites()} />\n\n                                    {/* <div id=\"liste_invites\">\n                                        <ul id=\"ul_invites\">\n                                            {this.generateListeInvites()}\n                                        </ul>\n                                    </div> */}\n\n                                    {/* <textarea name=\"liste_invites\" id=\"liste_invites\" readOnly>\n                                        \n                                    </textarea> */}\n\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n        return content;\n    }\n}","import FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentPlugin, { toMoment } from '@fullcalendar/moment';\n// import moment from 'moment';\nimport React, { Component } from 'react'\nimport './Agenda.css';\nimport AgendaModal from './AgendaModal';\n\n// function generateEventId(){\n//     let key = moment().format('x');\n//     return (Math.floor(Math.random() * key) + 1);\n// }\nconst baseURL = \"http://localhost:3001\";\n\nexport default class Agenda extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            \n            mail: this.props.mail,\n            eventType: '',\n            openModal: false,\n            startDate: '',\n            startTime: '',\n            endDate: '',\n            endTime: '',\n            user_events: [],\n            getEvents: true, //doit-on récupérer les evenements dans la bdd ?\n            putEvents: false, //doit-on envoyer les evenements locaux dans la bdd ?\n        }\n    }\n    calendarRef = React.createRef(); //on donne cette reference au calendrier pour toujours l'avoir et pouvoir utiliser les methodes de l'api\n\n    componentDidMount(){\n        //Récupération de tous les events dans la bdd\n            this.setState({ getEvents: false });\n            fetch(baseURL + \"/events/get\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({mail: this.state.mail })\n            })\n            .then((res) => {\n                if (res.ok)\n                {\n                    res.json().then((res) => {\n                        if (res.all_events)\n                        {\n                            console.log(\"events fetched : \", res.all_events);\n                            let evenements = [];\n                            let dispos = [];\n                            let rdvs = [];\n                            let all_events = [];\n                            res.all_events.forEach(e => {\n                                if (e.type === 'evenement')\n                                    evenements.push({\n                                        title: e.objet,\n                                        extendedProps: {\n                                            user_mail: e.user_mail,\n                                            users_invited: e.users_invited,\n                                            type: e.type,\n                                            description: e.description\n                                        },\n                                        allDay: e.allDay,\n                                        start: e.dateStart,\n                                        end: e.dateEnd,\n                                        color: e.color,\n                                        textColor: e.textColor\n                                    });\n                                // else if (e.type === 'dispo')\n                                //     dispos.push(dispo);\n                                // else if (e.type === 'rdv')\n                                //     rdvs.push(e);\n                            })\n                            all_events = evenements.concat(dispos).concat(rdvs);\n                            this.setState({ user_events: all_events });\n\n                        }\n                        console.log(\"fetch réussi : \", res.message);\n                    })\n                }\n                else{\n                    res.json().then(res => {\n                        console.log(\"Mauvaise réponse réseau : \", res.message);\n                    });\n                    \n                }\n            })\n            .catch(err => console.log(\"erreur lors de la récupération des events dans la BDD : \" + err.message));\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.props.eventType && this.props.eventType !== this.state.eventType)\n        {\n            this.setState({\n                eventType: this.props.eventType,\n                openModal: true,\n            });\n        }\n        if (prevProps && prevProps.mail !== this.props.mail)\n        {\n            this.setState({ mail: this.props.mail });\n        }\n        // console.log(this.state.user_events);\n        \n        // if (prevState.user_events.length !== this.state.user_events.length)\n        // {\n\n        // }\n\n    }\n\n    clearState(){\n        this.setState({\n            eventType: '',\n            openModal: false,\n            startDate: '',\n            startTime: '',\n            endDate: '',\n            endTime: '',\n        })\n    }\n    //fonction fléchée pour accéder au this\n    handleCloseModal = () => {\n        this.props.clearEventType();\n        this.clearState();\n    }\n\n    handleModalChanges = (state) => {\n        this.setState(state);\n    }\n\n    handleDateSelection = (selectionInfo) => {\n        this.setState({ openModal: true });\n        let calendar = selectionInfo.view.calendar;\n        calendar.unselect();\n        let start = toMoment(selectionInfo.start, calendar);\n        let end = toMoment(selectionInfo.end, calendar);\n        this.setState({\n            startDate: start.format(\"YYYY-MM-DD\"),\n            startTime: start.format(\"HH:mm\"),\n            endDate: end.format(\"YYYY-MM-DD\"),\n            endTime: end.format(\"HH:mm\"),\n        });\n    }\n\n    handleAddEvent = (event) => {\n        let calendar = this.calendarRef.current.getApi();\n        calendar.addEvent(event);\n        this.clearState();\n    }\n\n    handleSendEvents = (addInfo) => {\n        let event = addInfo.event;\n        let event_parsed = {\n            user_mail: event.extendedProps.user_mail,\n            users_invited: event.extendedProps.users_invited,\n            allDay: event.allDay,\n            dateStart: event.startStr,\n            dateEnd: event.endStr,\n            objet: event.title,\n            description: event.extendedProps.description,\n            color: event.backgroundColor,\n            textColor: event.textColor,\n            type: event.extendedProps.type\n        }\n        console.log(\"avant fetch : \" + event.color);\n        fetch(baseURL + \"/event/save\", {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(event_parsed)\n        })\n        .then(res => {\n            if (res.ok)\n                res.json().then(res => {\n                    console.log(\"envoi reussi : \" + res.message);\n                })\n            else\n                res.json().then(res => {\n                    console.log(\"Mauvaise reponse reseau : \" + res.message);\n                })\n        })\n        .catch(err => console.log(\"erreur lors de l'envoi d'un event dans BDD : \" + err));\n    }\n\n    // handleEventsSet = (events) => {\n    //     this.setState({\n    //         user_events: events\n    //     });\n    // }\n\n    render() {\n        const modal = this.state.openModal\n                        ?(\n                            <AgendaModal \n                            handleCloseModal={this.handleCloseModal}\n                            handleAddEvent={this.handleAddEvent}\n                            startDate={this.state.startDate}\n                            startTime={this.state.startTime}\n                            endDate={this.state.endDate}\n                            endTime={this.state.endTime}\n                            eventType={this.state.eventType}\n                            mail={this.state.mail}\n                            />\n                        )\n                        : null\n        return (\n            <div className=\"divFullCalendar\">\n\n                {/* <AgendaModal\n                openModal={this.state.openModal}\n                handleCloseModal={this.handleCloseModal}\n                handleChanges={this.handleModalChanges}\n                handleAddEvent={this.handleAddEvent}\n                startDate={this.state.startDate}\n                startTime={this.state.startTime}\n                endDate={this.state.endDate}\n                endTime={this.state.endTime}\n                /> */}\n                {modal}\n                <FullCalendar\n                ref={this.calendarRef}\n                plugins={[ dayGridPlugin, timeGridPlugin, interactionPlugin, momentPlugin ]}\n                initialView=\"dayGridMonth\"\n                locale='fr'\n                firstDay={1}\n                events={this.state.user_events}\n                buttonText={{\n                    today: \"aujourd'hui\",\n                    month: \"mois\",\n                    week: \"semaine\",\n                    day: \"jour\"\n                }}\n                headerToolbar={{\n                    start: 'prev,next,today',\n                    center: 'title',\n                    end: 'dayGridMonth,timeGridWeek,timeGridDay'\n                }}\n                businessHours={[\n                    {\n                        daysOfWeek: [1, 2, 3, 4, 5],\n                        startTime: '08:00',\n                        endTime: '19:00'\n                    }\n                ]}\n                selectable={true}\n                selectMirror={true}\n                editable={true}\n                select={this.handleDateSelection}\n                // eventsSet={this.handleEventsSet}\n                eventAdd={this.handleSendEvents}\n                />\n            </div>\n        )\n    }\n}\n","import './AccueilLoggedIn.css';\nimport React, { Component } from 'react';\nimport Agenda from './Agenda';\n\n\n// const baseURL = \"http://localhost:3001\";\n\nclass AccueilLoggedIn extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      mail: this.props.mail,\n      eventType: '',\n      menuOpened: false,\n      profilOpened: false,\n    }\n  }\n  \n  componentDidUpdate(prevProps){\n   const menuOpened = this.props.menuOpened;\n   const profilOpened = this.props.profilOpened;\n   if (prevProps.menuOpened !== menuOpened || prevProps.profilOpened !== profilOpened){\n     this.setState({ menuOpened, profilOpened });\n   }\n  \n   if (this.props.eventType !== this.state.eventType)\n   {\n      this.setState({ eventType: this.props.eventType });\n   }\n   if (prevProps.mail !== this.props.mail)\n   {\n     this.setState({ mail: this.props.mail });\n   }\n }\n\n clearEventType = () => {\n   this.setState({\n     eventType: '',\n   });\n   this.props.clearEventType();\n }\n\n  render() {\n    const divClass = this.state.menuOpened ? 'menuOpened' : (this.state.profilOpened ? 'profilOpened' : '');\n    \n    return (\n    <div id=\"accLoggedIn\" className={divClass}>\n      <Agenda\n      eventType={this.state.eventType}\n      clearEventType={this.clearEventType}\n      mail={this.state.mail}\n      />\n    </div>\n\n    );\n  }\n}\n\nexport default AccueilLoggedIn;","import React, {Component} from 'react';\nimport './Accueil.css';\nimport './Button.css';\n//import Calendrier from './Calendrier';\n\nclass Accueil extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            mail: '', \n            mdp: ''\n        };\n\n        this.baseURL = \"http://localhost:3001\";\n    }\n\n    gotoInscription = () =>{\n        this.props.handlePage({ inInscription: true });\n    }\n\n    saveChanges = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({ [name]: value })\n    }\n\n    handleCanBeLogged = (prenom, nom, mail) => {\n        this.props.setUserInfos(prenom, nom, mail);\n        this.props.connect();\n    }\n\n    handleConnexion = event => {\n        event.preventDefault();\n\n        let user = {\n            mail: this.state.mail,\n            mdp: this.state.mdp\n        }\n\n        fetch(this.baseURL + \"/connect\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(user)\n        })\n         .then(response => response.json().then(res => ({ status: response.status, data: res })))\n         .then(res => {\n             if (res.status === 400)\n                alert(res.data.message);\n            if (res.status === 200)\n                //console.log(res.data.name);\n                this.handleCanBeLogged(res.data.prenom, res.data.nom, res.data.mail);\n        })\n        .catch(err => {\n            alert(\"Erreur : \" + err);\n        })\n    }\n\n    render() {\n        return (\n                <div className=\"corps\">\n\n                    <div className=\"formulaire\">\n                        <form name=\"formConnexion\" id=\"formConnexion\" onSubmit={this.handleConnexion}>\n\n                            <input type=\"email\" id=\"email\" name=\"mail\" placeholder=\"login (email)\" required\n                            onChange={this.saveChanges} /> <br />\n\n                            <input type=\"password\" id=\"pwd\" name=\"mdp\" placeholder=\"mot de passe\" required\n                            onChange={this.saveChanges} /> <br />\n\n                            <input type=\"submit\" id=\"connect\" value=\"Connexion\" /><br />\n\n                            <a href=\"none\" id=\"pwdforgot\">Mot de passe oublié ?</a>\n\n                            <div className=\"divInscription\">\n                                <button type=\"button\" id=\"inscription\" onClick={this.gotoInscription}>Inscription</button>\n                            </div>\n                        </form>\n                    </div>\n\n                    {/* <div className=\"calendrier\">\n                        <Calendrier />\n                    </div> */}\n                </div>\n        );\n    }\n}\n\nexport default Accueil;","export default __webpack_public_path__ + \"static/media/logo.a22bb596.png\";","import logo from './img/logo.png';\nimport './Header.css';\n\nconst Header = (props) => {\n    const handleGotoMain = () => {\n        props.gotoMain();\n    }\n    return (\n        <header className=\"header\">\n            <img className=\"logo\" src={logo} alt=\"logo\" height=\"32\" width=\"32\" onClick={handleGotoMain}/>\n            <h1 id=\"titreHeader\">BOOKERIST</h1>\n        </header>\n    )\n}\n\nexport default Header;","import './HeaderLoggedIn.css';\nimport './Button.css';\nimport logo from './img/logo.png';\nimport React, { useEffect, useState } from 'react';\n\nexport default function HeaderLoggedIn(props) {\n  const [state, setState] = useState({\n    menuOpened: false,\n    profilOpened: false,\n  });\n  // const [eventType, setEventType] = useState(\"\");\n\n  // const {handleMenus} = props.handleMenus();\n  //A chaque fois que le state est modifié et qu'un menu est ouvert, on vérifie si on clique en dehors du menu\n  useEffect(() => {\n    function handleCloseMenus(){\n      props.handleMenus({ menuOpened: false, profilOpened: false});\n      setState({\n        ...state,\n        menuOpened: false,\n        profilOpened: false,\n      });\n\n    }\n\n    if (state.profilOpened || state.menuOpened){\n      window.addEventListener('click', handleCloseMenus);\n    }\n    return function (){\n      window.removeEventListener('click', handleCloseMenus);\n    }\n  });\n\n  function toggleProfil (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    props.handleMenus({ profilOpened : !state.profilOpened })\n    setState(state => {\n        return {\n          ...state,\n          profilOpened: !state.profilOpened,\n        }\n      });\n  }\n\n  function toggleMenu(event){\n    event.preventDefault();\n    event.stopPropagation();\n    props.handleMenus({ menuOpened: !state.menuOpened });\n    setState(state => {\n      return {\n        ...state,\n        menuOpened: !state.menuOpened,\n      }\n    });\n  }\n\n  function handleDisconnect (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    //on supprime les données sauvegardées en local de l'utilisateur puis on le déconnecte\n    localStorage.clear();\n    props.disconnect();\n  }\n\n  function handleGotoMain(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    setState({\n      menuOpened: false,\n      profilOpened: false,\n    });\n    props.gotoMain();\n    \n  }\n\n  function handlePageMenu(e){\n    e.preventDefault();\n    e.stopPropagation();\n    const page = e.target.name;\n    const pageName = `in${page}`\n    setState({\n      menuOpened: false,\n      profilOpened: false,\n    });\n    props.handlePage({ [pageName]: true });\n  }\n\n  function handleEventMenu(e){\n    e.preventDefault();\n    // setEventType(e.target.name);\n\n    props.giveEventType({eventType: e.target.name});\n  }\n\n  return (\n    <header className=\"headerLoggedIn\">\n\n      \n\n      <ul className=\"menu\">\n          <li id=\"liMenu\">\n            <a href='none' onClick={toggleMenu}>MENU</a>\n              {state.menuOpened\n              ? (\n                <ul id=\"choixMenu\">\n                  <li>\n                    <a href='none' name=\"Accueil\" onClick={handlePageMenu}>Accueil</a>\n                  </li>\n                  <li>      \n                    <a href='none' name=\"dispo\" onClick={handleEventMenu}>Ajout disponibilité</a>\n                  </li>\n                  <li>\n                    <a href='none' name=\"rdv\" onClick={handleEventMenu}>Prendre rendez-vous</a>\n                  </li>        \n                  <li>\n                    <a href='none' name=\"evenement\" onClick={handleEventMenu}>Créer évènement</a>\n                  </li>\n                  <li>\n                    <a href='none' name=\"Manuel\" onClick={handlePageMenu}>Manuel d'utilisation</a>\n                  </li>\n                  <li>\n                    <a href='none' name=\"Contact\" onClick={handlePageMenu}>Contact</a>\n                  </li>        \n                </ul>\n              )\n              : (null)\n              }\n          </li>\n          <li>\n            <img id=\"logoLoggedIn\" src={logo} alt=\"logo\" width=\"32\" height=\"32\"\n            onClick={handleGotoMain} />\n          </li>\n          <li id=\"liProfil\">\n            <a href=\"none\" onClick={toggleProfil}>{props.prenom.toUpperCase()} ({props.mail})</a>\n            {state.profilOpened\n            ? (\n              <ul id=\"choixProfil\">\n              <li>\n                <a href=\"none\" name=\"Params\" onClick={handlePageMenu}>Paramètres</a>\n              </li>\n              <li>\n                <a href=\"none\" onClick={handleDisconnect}>Se déconnecter</a>\n              </li>\n            </ul>\n            )\n            : (null)\n            }\n          </li>\n        </ul>\n    </header>\n  );\n}","import './Inscription.css'\nimport React, { Component } from 'react'\nimport reactDom from 'react-dom'\nimport App from './App'\nimport './Button.css'\n\nclass Inscription extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            nom: '',\n            prenom: '',\n            mail: '',\n            mail2: '',\n            mdp: '',\n            mdp2: ''\n        }\n\n        this.baseURL = \"http://localhost:3001\";\n    }\n\n    //fx flechée pour acceder au this\n    saveChanges = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState({ [name]: value });\n    }\n\n    handleMailUpdate = event => {\n        //automatiquement mettre le mail en minuscules\n        this.setState({ mail: event.target.value.toLowerCase() })\n    }\n\n    handleFirstNameUpdate = (event) => {\n        let prenom = event.target.value;\n        let prenomMaj = prenom.charAt(0).toUpperCase() + prenom.slice(1);\n        this.setState({ prenom: prenomMaj });\n    }\n\n    handleLastNameUpdate = (event) => {\n        this.setState({ nom: event.target.value.toUpperCase() });\n    }\n\n    handleInscriptionFinished = () => {\n        this.props.gotoMain();\n    }\n\n    //fx flechée pour acceder au this\n    sendInscription = event => {\n        event.preventDefault()\n        //destsructuration pour + de lisibilite\n        const {nom, prenom, mail, mail2, mdp, mdp2} = this.state;\n\n        if (mail !== mail2){\n            alert(\"Les deux mails ne correspondent pas.\");\n        }\n        if (mdp !== mdp2){\n            alert(\"Les deux mots de passe ne correspondent pas.\");\n        }\n        else if (mail === mail2 && mdp === mdp2){\n            let user = {\n                nom: nom,\n                prenom: prenom,\n                mail: mail,\n                mdp: mdp\n            };\n            fetch(this.baseURL + \"/inscription\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json().then(response => ({status: res.status, data: response})))\n            .then(res => {\n                alert(res.data.message);\n                if (res.status === 201){\n                    this.handleInscriptionFinished();\n                    reactDom.render(\n                        <App />,\n                        document.getElementById('root')\n                    );\n                }\n            })\n            .catch(err => {\n                // alert(\"Un problème est survenu lors de la connexion à la base de donnée. \")\n                console.log(err);\n            });\n        }\n    }\n\n    render() {    \n        return (\n            <div className=\"Inscription\">\n                <form className=\"formInscription\" name=\"formInscription\" onSubmit={this.sendInscription}>\n                    <fieldset>\n                        <h2>Inscription</h2>\n\n                        <input type=\"text\" id=\"prenom\" name=\"prenom\" placeholder=\"Prénom\" required\n                        onChange={this.handleFirstNameUpdate}\n                        value={this.state.prenom} />\n\n                        <input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"NOM\" required\n                        onChange={this.handleLastNameUpdate}\n                        value={this.state.nom} />\n\n                        <input type=\"email\" id=\"mail\" name=\"mail\" placeholder=\"e-mail\" required\n                        onChange={this.handleMailUpdate}\n                        value={this.state.mail} />\n\n                        <input type=\"email\" id=\"mail2\" name=\"mail2\" placeholder=\"confirmer e-mail\" required \n                        onChange={this.saveChanges} />\n\n                        <input type=\"password\" id=\"mdp\" name=\"mdp\" placeholder=\"mot de passe\" required\n                        onChange={this.saveChanges} />\n\n                        <input type=\"password\" id=\"confirmMdp\" name=\"mdp2\" placeholder=\"confirmer mot de passe\" required\n                        onChange={this.saveChanges} />\n\n                        <input type=\"submit\" id=\"goInscription\" value=\"Je m'inscris !\" />\n\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Inscription;","import React, { useState } from \"react\";\r\nimport './Contact.css';\r\nimport './Button.css';\r\n\r\nexport default function Contact(props){\r\n    const baseURL = \"http://localhost:3001\";\r\n    const max = {\r\n        objet: 70,\r\n        message: 2000,\r\n    }\r\n    const [state, setState] = useState({\r\n        objet: '',\r\n        message: '',\r\n        compteur_objet: max.objet,\r\n        compteur_message: max.message,\r\n    });\r\n\r\n    function handleChange(e){\r\n        const champ = e.target.name;\r\n        const value = e.target.value;\r\n        const nameCompteur = `compteur_${champ}`;\r\n        const maxLength = `${champ === 'objet' ? max.objet : max.message}`;\r\n\r\n        if (value.length <= maxLength){            \r\n            setState(state => { \r\n                return {\r\n                    ...state,\r\n                    [champ]: value,\r\n                    [nameCompteur]: maxLength - value.length,\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            const msg = \"Nombre de caractères max atteint pour \"`${champ === 'objet' ? \"l'objet\" : \"le message.\"}`;\r\n            alert(msg);\r\n        }\r\n    }\r\n\r\n    function handleSubmitMessage(e){\r\n        e.preventDefault();\r\n\r\n        const alreadySent = JSON.parse(window.localStorage.getItem('contactSent'));\r\n        //on vérifie d'abord que l'utilisateur n'a pas encore envoyé de message pour éviter les spams.\r\n        if (alreadySent !== null && alreadySent.sentContact === true){\r\n            alert(\"Vous avez déjà envoyé un message de contact.\");\r\n            handleFinishContact();\r\n        }\r\n        else {\r\n            let contactMessage = {\r\n                mail: props.mail,\r\n                prenom: props.prenom,\r\n                nom: props.nom,\r\n                objet: state.objet,\r\n                message: state.message,\r\n            }\r\n\r\n            fetch(baseURL + \"/contact\", {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(contactMessage),\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                alert(res.message);\r\n                handleFinishContact();\r\n            })\r\n            .catch(err => {\r\n                alert(\"Erreur : \" + err);\r\n            });\r\n        }\r\n    }\r\n    \r\n    function handleFinishContact(){\r\n        setState({\r\n            objet: '',\r\n            message: '',\r\n            compteur_objet: max.objet,\r\n            compteur_message: max.message,\r\n        });\r\n        window.localStorage.setItem('contactSent', JSON.stringify({ sentContact: true }));\r\n        props.gotoMain();\r\n    }\r\n\r\n    function handleReset(e){\r\n        e.preventDefault();\r\n        setState({\r\n            objet: '',\r\n            message: '',\r\n            compteur_objet: max.objet,\r\n            compteur_message: max.message,\r\n        })\r\n    }\r\n    return(\r\n        <div id=\"corps_contact\">\r\n            <h2 id=\"titre_contact\">Contact</h2>\r\n            <form method=\"post\" className=\"Contact\" id=\"formMessage\" onSubmit={handleSubmitMessage} onReset={handleReset}>\r\n                <p className=\"txtMessage\">Pour nous contacter, écrivez-nous un message :</p>\r\n                <br/>\r\n                <div className=\"divObjet\">\r\n                    <textarea name=\"objet\" id=\"objet\" placeholder=\"Objet\" value={state.objet} onChange={handleChange} required />\r\n                    <span id=\"compteurObjet\">{state.compteur_objet}</span>\r\n                </div>\r\n                <div className=\"divMessage\">\r\n                    <textarea name=\"message\" id=\"message\" placeholder=\"Message\" value={state.message} onChange={handleChange} required />\r\n                    <span id=\"compteurMessage\">{state.compteur_message}</span>\r\n                </div>\r\n                <br/>\r\n                <input className=\"bouton_contact\" type=\"reset\" value=\"Tout effacer\"></input>\r\n                <input className=\"bouton_contact\" type=\"submit\" value=\"Envoyer\"></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\"\r\nimport \"./ForgotPass.css\"  \r\nconst baseURL=\"http://localhost:3001/\";\r\n\r\nconst ForgotPass = ()=>{\r\n    const [mail, setMail] = useState('');\r\n\r\n    function saveChanges(event){\r\n        setMail(event.target.value.toLowerCase())\r\n    }\r\n\r\n    function handleForgetPass(event){\r\n        event.preventDefault()\r\n        fetch(baseURL+'/forgotPass',{ \r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(mail)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"forgotPass\">\r\n            <h2>Mot de passe oublié </h2>\r\n            <form id=\"formulaireMDP\" onSubmit={handleForgetPass}>\r\n            <br/>\r\n            <input type=\"email\" id=\"mailForgotPass\" name=\"mailForgotPass\" placeholder=\"e-mail\" \r\n            onChange={saveChanges} \r\n            value={mail}\r\n            required/>\r\n            <br/>\r\n            <input className=\"bouton_forgotPass\" type=\"submit\" value=\"Envoyer\"></input>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ForgotPass; \r\n\r\n\r\n\r\n        \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n","import React, { Component } from \"react\";\r\nimport './Parametre.css'\r\n\r\nconst baseURL = \"http://localhost:3001\"\r\n\r\nclass Parametre extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            mail: this.props.mail,\r\n            newMail: this.props.mail,\r\n            mdp: \"\",\r\n            newMdp: \"\",\r\n            confirmNewMdp: \"\",\r\n            changeMail: false,\r\n            changeMdp: false,\r\n        }\r\n        this.handleModifMail= this.handleModifMail.bind(this)\r\n        this.handleModifPass= this.handleModifPass.bind(this)\r\n        this.handleMailChange= this.handleMailChange.bind(this)\r\n        this.handleReset = this.handleReset.bind(this)\r\n        this.handleSubmitParams = this.handleSubmitParams.bind(this)\r\n        this.handleChanges = this.handleChanges.bind(this)\r\n        this.clearState = this.clearState.bind(this)\r\n        this.handleNewInfos = this.handleNewInfos.bind(this)\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.mail !== this.state.mail){\r\n            this.setState({\r\n                mail: this.props.mail,\r\n                newMail: this.props.mail,\r\n            })\r\n        }\r\n    }\r\n\r\n    clearState(){\r\n        this.setState({\r\n            mail: this.props.mail,\r\n            newMail: this.props.mail,\r\n            mdp: \"\",\r\n            newMdp: \"\",\r\n            confirmNewMdp: \"\",\r\n            changeMail: false,\r\n            changeMdp: false,\r\n        })\r\n    }\r\n\r\n    handleModifMail(event) {\r\n        this.setState({\r\n            changeMail: true,\r\n        })\r\n    }\r\n\r\n    handleModifPass(event){\r\n        this.setState({\r\n            changeMdp: true,\r\n        })\r\n    }\r\n\r\n    handleMailChange(event){\r\n        this.setState({\r\n            newMail: event.target.value.toLowerCase()\r\n        })\r\n    }\r\n\r\n    handleReset(event){\r\n        // this.setState({\r\n        //     mail: this.props.mail,\r\n        //     changeMail: false,\r\n        //     changeMdp: false,\r\n        //})\r\n        this.clearState()\r\n    }\r\n\r\n\r\n    handleNewInfos(newMail){\r\n        this.props.handleChangeParams(newMail)\r\n    }\r\n\r\n\r\n    handleSubmitParams(event){\r\n        event.preventDefault()\r\n        if(this.state.newMdp === this.state.confirmNewMdp){\r\n            let userModif = {\r\n                mail: this.state.mail,\r\n                newMail: this.state.newMail,\r\n                mdp: this.state.mdp,\r\n                newMdp: this.state.newMdp,\r\n                changeMail: this.state.changeMail,\r\n                changeMdp: this.state.changeMdp,\r\n            }\r\n            this.clearState()\r\n            console.log(userModif)\r\n            fetch(baseURL + \"/params\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userModif)\r\n            })\r\n            .then(response => response.json().then(res => ({ status: response.status, data: res })))\r\n            .then(res => {\r\n                alert(res.data.message)\r\n                if(res.status === 200)\r\n                {\r\n                    console.log(\"infos\")\r\n                    this.handleNewInfos(res.data.mail)\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n        }else {\r\n            alert(\"Les deux mots de passes ne correspondent pas.\")\r\n        }\r\n    }\r\n\r\n    handleChanges(event){\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n        this.setState({\r\n            [name]:value,\r\n        })\r\n    }\r\n\r\n    render() {       \r\n        return(\r\n        <div className=\"parametre\">\r\n            <form id=\"formParams\" method=\"post\" onSubmit={this.handleSubmitParams}>\r\n                <h2>Paramètre</h2>\r\n                <input className=\"inputParam\" type=\"email\" id=\"mail\" name=\"mail\" value={this.state.newMail} onChange={this.handleMailChange}\r\n                disabled= {!this.state.changeMail} required />\r\n                <br/>\r\n                <input className=\"bouton_modifier\" id=\"modifMail\" type=\"button\" onClick={this.handleModifMail} value=\"Modifier\"/>\r\n                <br/>\r\n                <input className=\"bouton_modifier\" id=\"modifMdp\" type=\"button\" onClick={this.handleModifPass} value=\"Modifier mot de passe\"/>\r\n                <br/>\r\n                <input className=\"inputParamPass\" type=\"password\" id=\"newMdp\" name=\"newMdp\" placeholder=\"Nouveau mot de passe\" \r\n                disabled= {!this.state.changeMdp} onChange={this.handleChanges}/>\r\n                <br/>\r\n                <input className=\"inputParamPass\" type=\"password\" name=\"confirmNewMdp\" placeholder=\"Confirmez mot de passe\"\r\n                disabled= {!this.state.changeMdp} onChange={this.handleChanges}/>\r\n                <br/>\r\n                <input className=\"inputParamPass\" type=\"password\" id=\"mdp\" name=\"mdp\" placeholder=\"Mot de passe\" required onChange={this.handleChanges} value={this.state.mdp}/>\r\n                <br />\r\n                <input type=\"reset\" className=\"bouton_modifier\" id =\"reset\" value=\"Annuler\" onClick={this.handleReset} />\r\n                <input className=\"bouton_modifier\" id=\"save\" type=\"submit\" value=\"Sauvegarder\"/>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Parametre;","import './App.css';\nimport AccueilLoggedIn from './AccueilLoggedIn';\nimport Accueil from './Accueil';\nimport Header from './Header';\nimport HeaderLoggedIn from './HeaderLoggedIn';\nimport Inscription from './Inscription';\nimport React, { Component } from 'react';\n//import Agenda from './AccueilLoggedIn';\nimport Contact from './Contact';\nimport ForgotPass from './ForgotPass';\n// import Calendrier from './Calendrier';\nimport Parametre from './Parametre';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = ({\n      eventType: '',\n      menuOpened: false,\n      profilOpened: false,\n\n      prenom: '',\n      nom: '',\n      mail: '',\n\n      loggedIn: false,\n      inAccueil: true,\n      inInscription: false,\n      inForgotPass: false,\n      inContact: false,\n      inParams: false,      \n      \n    });\n  }\n\n  //Quand le composant est monté, il récupère l'état sauvegardé s'il existe\n  componentDidMount() {\n    let user = window.localStorage.getItem('userInfos');\n    if (user != null){\n      user = JSON.parse(user);\n      this.setState(user);\n    }\n  }\n\n  //Chaque fois que le composant est mis à jour, on enregistre l'état dans le stockage local\n  componentDidUpdate() {\n    let user = this.state;\n    window.localStorage.setItem('userInfos', JSON.stringify(user));\n  }\n\n  //Utilisée lors de la connexion pour enregistrer directement les informations dans l'état\n  setUserInfos = (prenom, nom, mail) => {\n    this.setState({ prenom, nom, mail });\n  }\n\n  //fonction permettant de remettre le state à 0 (lors d'une déconnexion par exemple)\n  clearState = () => {\n    this.setState({\n      eventType:'',\n      menuOpened: false,\n      profilOpened: false,\n      \n\n      prenom: '',\n      nom: '',\n      mail: '',\n\n      loggedIn: false,\n      inAccueil: true,\n      inInscription: false,\n      inForgotPass: false,\n      inContact: false,\n      inParams: false,\n    })\n  }\n\n  //Fonction pour gérer le status de l'utilisateur (connecté ou non)\n  handleLoginChange = (loggedIn) => {\n    this.setState({ loggedIn });\n    if (!loggedIn){\n      localStorage.clear();\n      this.clearState();\n      // this.handlePage({ inAccueil: true });\n    }\n  }\n\n  //Fonction qui gère le changement de pages\n  handlePage = (pages) => {\n    //tableau contenant toutes les props éventuelles de pages\n    const tab = [\"inAccueil\", \"inInscription\", \"inForgotPass\", \"inContact\", \"inParams\"];\n    \n    //on boucle sur les valeurs de l'objet pages. Si la prop est undefined, on la met a false:\n    //ça permet de pouvoir passer en argument seulement la page qu'on veut changer.\n    //on modifie l'état directement dans la boucle\n    for(let prop of tab){\n      pages[prop] = pages[prop] === undefined ? false : pages[prop];\n      this.setState({ [prop]: pages[prop] });\n    }\n  }\n\n  //Fonction pour partager l'état du menu entre la page et le header\n  handleMenusAccueil = (menuState) => {\n    //comme pour handlePage on fait un tableau pour modifier facilement le cas échéant\n    //la boucle permet de ne jamais ouvrir les deux menus en même temps\n    const tab = [\"menuOpened\", \"profilOpened\"];\n    for(let prop of tab){\n      menuState[prop] = menuState[prop] === undefined ? false : menuState[prop];\n      this.setState({ [prop]: menuState[prop] });\n    }\n  }\n\n  handleEventType = ({ eventType }) => {\n    console.log(\"App, type: \" + eventType);\n    this.setState({ eventType });\n  }\n\n  clearEventType = () => {\n    this.setState({\n      eventType: '',\n    })\n  }\n  \n  handleChangeParams = (newMail) =>{\n    this.setState({\n      mail: newMail,\n    })\n  }\n\n  //Quand le composant va être démonté, on s'assure de vider le stockage local\n  componentWillUnmount() {\n    localStorage.clear();\n  }\n\n  render(){\n    // const loggedIn = this.state.loggedIn;\n    // const inInscription = this.state.inInscription;\n    \n    const { nom, prenom, mail, loggedIn, inAccueil, inInscription, inForgotPass, inContact, inParams } = this.state;\n    let header = null;\n    let page = null;\n\n    loggedIn\n    ? header = (\n    <HeaderLoggedIn\n    prenom={prenom}\n    mail={mail}\n    disconnect={() => this.handleLoginChange(false)}\n    gotoMain={() => this.handlePage({ inAccueil: true })}\n    handlePage={this.handlePage}\n    handleMenus={this.handleMenusAccueil}\n    giveEventType={this.handleEventType}\n    />\n    )\n    : header = (\n    <Header \n    gotoMain={() => this.handlePage({ inAccueil: true })} />\n    );\n\n    if (inAccueil){\n      loggedIn\n      ? page = (\n      <AccueilLoggedIn\n      menuOpened={this.state.menuOpened}\n      profilOpened={this.state.profilOpened}\n      eventType={this.state.eventType}\n      clearEventType={this.clearEventType}\n      mail={this.state.mail}\n       />\n      // <Calendrier />\n      )\n      : page = (\n      <Accueil \n      handlePage={this.handlePage}\n      setUserInfos={this.setUserInfos}\n      connect={() => this.handleLoginChange(true)} />\n      );\n    }\n    if (inInscription){\n      page = (\n        <Inscription \n        gotoMain={() => this.handlePage({ inAccueil: true })} />\n      );\n    }\n    if (inForgotPass){\n      page = (\n        <ForgotPass />\n      );\n    }\n    if (inContact){\n      page = (\n        <Contact \n        prenom={prenom}\n        nom={nom}\n        mail={mail}\n        gotoMain={() => this.handlePage({ inAccueil: true })} />\n      );\n    }\n    \n    if (inParams){\n      page = (\n        <Parametre\n        mail={mail}\n        handleChangeParams = {this.handleChangeParams}\n        />\n      );\n    }\n\n    return(\n      <div className=\"App\">\n        {header}\n        {page}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import reportWebVitals from './reportWebVitals'\nimport App from './App';\n// import HeaderLoggedIn from './HeaderLoggedIn';\n// import Test from './Test';\n// import Header from './Header'\n// import Accueil from './Accueil'\n// import Inscription from './Inscription';\n// import Contact from './Contact';\n// import ForgotPass from './ForgotPass';\n// import Parametre from './Parametre'\n// import AgendaModal from './AgendaModal';\n\nReactDOM.render(\n  <App />,\n  // <AgendaModal \n  // eventType=\"evenement\"\n  // />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}